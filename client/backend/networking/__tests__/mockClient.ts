import Connection from "../types";

class MockWebRTCConnection implements Connection {
  _client: TestClient | undefined;
  constructor() {}
  send(data: string): void {
    if (!this._client) {
      throw new Error(
        "MockWebRTCConnection needs a ref to TestClient before it can send or receive data"
      );
    }
    this._client.onmessage(data);
    this.onmessage = jest.fn(this.onmessage);
  }

  onmessage(data: string): void {}

  addTestClient(client: TestClient) {
    this._client = client;
  }
}
class TestClient {
  _connection: MockWebRTCConnection;
  metadata: string;
  id: string;
  // TODO: make the name be autogenerated, as well
  constructor(connection: MockWebRTCConnection, metadata: string) {
    this.id = window.btoa(metadata);
    this._connection = connection;
    this.metadata = metadata;
    this.onmessage = jest.fn(this.onmessage);

    this._connection.addTestClient(this);
  }

  send(data: string) {
    this._connection.onmessage(data);
  }

  onmessage(data: string) {}
}

let idCount = 0;

const _getTestClientId = (count: number) => `test_client_${idCount}`;

export function getTestClient() {
  const clientId = _getTestClientId(idCount);
  idCount++;
  const connection = new MockWebRTCConnection();
  clientIdByConnection[clientId] = connection;
  return [new TestClient(connection, clientId), connection] as const;
}

const clientIdByConnection: Record<string, MockWebRTCConnection> = {};

export function getMockConnection(metadata: string) {
  return clientIdByConnection[metadata];
}
